// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

package integers

// The type errors returned by Gobra are consistent with those returned by the Go compiler

const (
	// constant expression 1 << 10 overflows int8
	//:: ExpectedOutput(type_error)
	SL1 = int8(1 << 10)

	// shift count 10 large for type int8
	//:: ExpectedOutput(type_error)
	SL2 = int8(1) << 10

	// shift count 1024 large for type integer
	//:: ExpectedOutput(type_error)
	SL3 = 1 << 1024

	// shift count 9 large for type int8
	//:: ExpectedOutput(type_error)
	SL4 = int8(12) << 9

	// constant 0 - 1 overflows uint
	//:: ExpectedOutput(type_error)
	SL5 = int16(12) << -1

	// constant expression 0b11110000 overflows int8
	//:: ExpectedOutput(type_error)
	N1 = ^int8(0b11110000)

	// constant expression ^0b11110000 overflows int8
	//:: ExpectedOutput(type_error)
	N2 = int8(^0b11110000)

	// int8 is not mergeable with uint8
	//:: ExpectedOutput(type_error)
	AND1 = int8(1) & uint8(1)

	// constant expression 0 - 1 overflows uint8
	//:: ExpectedOutput(type_error)
	AND2 = uint8(1) & -1

	// uint32(1) &^ 1 does not cause type errors. However, uint32(1) & ^1 does
	// https://stackoverflow.com/questions/43782187/why-does-go-have-a-bit-clear-and-not-operator/43783202
	// constant expression ^1 overflows uint32
	//:: ExpectedOutput(type_error)
	AND3 = uint32(1) & ^1
)